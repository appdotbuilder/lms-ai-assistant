import { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';

import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { ArrowLeft, Plus, FileText, Video, HelpCircle, ClipboardList, Users, Brain, MessageSquare, CheckCircle } from 'lucide-react';
import { trpc } from '@/utils/trpc';
import { ContentViewer } from '@/components/ContentViewer';
import type { User, Course, Content, ContentType, CreateContentInput } from '../../../server/src/schema';

interface CourseViewProps {
  course: Course;
  currentUser: User;
  onBack: () => void;
}

export function CourseView({ course, currentUser, onBack }: CourseViewProps) {
  const [courseContent, setCourseContent] = useState<Content[]>([]);
  const [selectedContent, setSelectedContent] = useState<Content | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isCreateContentDialogOpen, setIsCreateContentDialogOpen] = useState(false);
  const [isCreatingContent, setIsCreatingContent] = useState(false);
  const [error, setError] = useState<string>('');
  
  // AI Assistant state
  const [aiQuestion, setAiQuestion] = useState('');
  const [aiResponse, setAiResponse] = useState('');
  const [isAskingAI, setIsAskingAI] = useState(false);

  const [contentFormData, setContentFormData] = useState<CreateContentInput>({
    course_id: course.id,
    title: '',
    description: null,
    content_type: 'text_lesson',
    content_data: '',
    order_index: 0
  });

  const loadCourseContent = useCallback(async () => {
    try {
      setIsLoading(true);
      const content = await trpc.getCourseContent.query(course.id);
      setCourseContent(content);
    } catch (error) {
      console.error('Failed to load course content:', error);
    } finally {
      setIsLoading(false);
    }
  }, [course.id]);

  useEffect(() => {
    loadCourseContent();
  }, [loadCourseContent]);

  const handleCreateContent = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setIsCreatingContent(true);

    try {
      const orderIndex = courseContent.length;
      const contentData = {
        ...contentFormData,
        order_index: orderIndex
      };
      
      const newContent = await trpc.createContent.mutate(contentData);
      setCourseContent((prev: Content[]) => [...prev, newContent]);
      setIsCreateContentDialogOpen(false);
      setContentFormData({
        course_id: course.id,
        title: '',
        description: null,
        content_type: 'text_lesson',
        content_data: '',
        order_index: 0
      });
    } catch (error) {
      console.error('Failed to create content:', error);
      setError('Failed to create content. Please try again.');
    } finally {
      setIsCreatingContent(false);
    }
  };

  const handleAiQuestion = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!aiQuestion.trim()) return;

    setIsAskingAI(true);
    try {
      // Create AI interaction
      await trpc.createAiInteraction.mutate({
        student_id: currentUser.id,
        course_id: course.id,
        content_id: selectedContent?.id || null,
        question: aiQuestion,
        interaction_type: 'question_answer'
      });

      // AI response simulation for demo purposes
      const aiResponse = `Based on the course content, here's what I can tell you about "${aiQuestion}": This is a simulated AI response that would normally be generated by an AI service. The AI assistant can help explain concepts, provide examples, and create practice questions based on your learning materials.`;
      
      setAiResponse(aiResponse);
    } catch (error) {
      console.error('Failed to ask AI:', error);
      setAiResponse('Sorry, I encountered an error. Please try asking your question again.');
    } finally {
      setIsAskingAI(false);
    }
  };

  const getContentIcon = (contentType: ContentType) => {
    switch (contentType) {
      case 'text_lesson':
        return <FileText className="h-4 w-4" />;
      case 'video':
        return <Video className="h-4 w-4" />;
      case 'quiz':
        return <HelpCircle className="h-4 w-4" />;
      case 'assignment':
        return <ClipboardList className="h-4 w-4" />;
      default:
        return <FileText className="h-4 w-4" />;
    }
  };

  const getContentTypeColor = (contentType: ContentType) => {
    switch (contentType) {
      case 'text_lesson':
        return 'bg-blue-100 text-blue-800';
      case 'video':
        return 'bg-red-100 text-red-800';
      case 'quiz':
        return 'bg-yellow-100 text-yellow-800';
      case 'assignment':
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const isTeacherOrAdmin = currentUser.role === 'teacher' || currentUser.role === 'administrator';
  const canManageCourse = isTeacherOrAdmin && (currentUser.role === 'administrator' || course.teacher_id === currentUser.id);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Button variant="ghost" size="sm" onClick={onBack}>
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back
              </Button>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">{course.title}</h1>
                <p className="text-gray-600">{course.description}</p>
              </div>
            </div>
            
            {canManageCourse && (
              <Dialog open={isCreateContentDialogOpen} onOpenChange={setIsCreateContentDialogOpen}>
                <DialogTrigger asChild>
                  <Button className="flex items-center gap-2">
                    <Plus className="h-4 w-4" />
                    Add Content
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-2xl">
                  <DialogHeader>
                    <DialogTitle>Add New Content</DialogTitle>
                    <DialogDescription>
                      Create new learning content for this course
                    </DialogDescription>
                  </DialogHeader>
                  <form onSubmit={handleCreateContent}>
                    <div className="space-y-4 py-4">
                      <div className="space-y-2">
                        <Label htmlFor="content-title">Title</Label>
                        <Input
                          id="content-title"
                          value={contentFormData.title}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                            setContentFormData((prev: CreateContentInput) => ({ ...prev, title: e.target.value }))
                          }
                          placeholder="e.g., Introduction to Variables"
                          required
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="content-type">Content Type</Label>
                        <Select 
                          value={contentFormData.content_type} 
                          onValueChange={(value: ContentType) =>
                            setContentFormData((prev: CreateContentInput) => ({ ...prev, content_type: value }))
                          }
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select content type" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="text_lesson">üìù Text Lesson</SelectItem>
                            <SelectItem value="video">üé• Video</SelectItem>
                            <SelectItem value="quiz">‚ùì Quiz</SelectItem>
                            <SelectItem value="assignment">üìã Assignment</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="content-description">Description (Optional)</Label>
                        <Textarea
                          id="content-description"
                          value={contentFormData.description || ''}
                          onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
                            setContentFormData((prev: CreateContentInput) => ({ 
                              ...prev, 
                              description: e.target.value || null 
                            }))
                          }
                          placeholder="Brief description of this content..."
                          rows={2}
                        />
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="content-data">Content</Label>
                        <Textarea
                          id="content-data"
                          value={contentFormData.content_data}
                          onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
                            setContentFormData((prev: CreateContentInput) => ({ ...prev, content_data: e.target.value }))
                          }
                          placeholder={
                            contentFormData.content_type === 'text_lesson' ? 'Write your lesson content here...' :
                            contentFormData.content_type === 'video' ? 'Enter video URL or embed code...' :
                            contentFormData.content_type === 'quiz' ? 'Enter quiz questions in JSON format...' :
                            'Enter assignment instructions...'
                          }
                          rows={6}
                          required
                        />
                      </div>
                    </div>
                    
                    {error && (
                      <Alert variant="destructive" className="mb-4">
                        <AlertDescription>{error}</AlertDescription>
                      </Alert>
                    )}

                    <DialogFooter>
                      <Button type="button" variant="outline" onClick={() => setIsCreateContentDialogOpen(false)}>
                        Cancel
                      </Button>
                      <Button type="submit" disabled={isCreatingContent}>
                        {isCreatingContent ? 'Creating...' : 'Create Content'}
                      </Button>
                    </DialogFooter>
                  </form>
                </DialogContent>
              </Dialog>
            )}
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        <div className="grid lg:grid-cols-3 gap-8">
          {/* Content List */}
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle>Course Content</CardTitle>
                <CardDescription>
                  {courseContent.length} {courseContent.length === 1 ? 'item' : 'items'} available
                </CardDescription>
              </CardHeader>
              <CardContent>
                {courseContent.length === 0 ? (
                  <div className="text-center py-12">
                    <FileText className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                    <h3 className="font-semibold text-gray-900 mb-2">No Content Yet</h3>
                    <p className="text-gray-600 mb-4">
                      {canManageCourse 
                        ? 'Start by adding your first lesson or assignment.'
                        : 'The instructor hasn\'t added any content yet.'
                      }
                    </p>
                  </div>
                ) : (
                  <div className="space-y-3">
                    {courseContent
                      .sort((a: Content, b: Content) => a.order_index - b.order_index)
                      .map((content: Content) => (
                        <div 
                          key={content.id} 
                          className={`p-4 border rounded-lg cursor-pointer transition-all ${
                            selectedContent?.id === content.id 
                              ? 'border-blue-500 bg-blue-50' 
                              : 'hover:border-gray-300 hover:bg-gray-50'
                          }`}
                          onClick={() => setSelectedContent(content)}
                        >
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3">
                              <div className={`p-2 rounded-full ${getContentTypeColor(content.content_type)}`}>
                                {getContentIcon(content.content_type)}
                              </div>
                              <div>
                                <h4 className="font-medium text-gray-900">{content.title}</h4>
                                {content.description && (
                                  <p className="text-sm text-gray-600 line-clamp-1">
                                    {content.description}
                                  </p>
                                )}
                              </div>
                            </div>
                            <div className="flex items-center gap-2">
                              <Badge variant="outline" className="text-xs">
                                {content.content_type.replace('_', ' ')}
                              </Badge>
                              {currentUser.role === 'student' && (
                                <CheckCircle className="h-4 w-4 text-green-500" />
                              )}
                            </div>
                          </div>
                        </div>
                      ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Content Detail & AI Assistant */}
          <div className="space-y-6">
            {/* Content Detail */}
            {selectedContent ? (
              <ContentViewer 
                content={selectedContent} 
                currentUser={currentUser}
              />
            ) : (
              <Card>
                <CardContent className="text-center py-12">
                  <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-600">Select content to view details</p>
                </CardContent>
              </Card>
            )}

            {/* AI Assistant - Only for Students */}
            {currentUser.role === 'student' && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Brain className="h-5 w-5 text-purple-600" />
                    AI Learning Assistant
                  </CardTitle>
                  <CardDescription>
                    Ask questions about the course content
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <form onSubmit={handleAiQuestion} className="space-y-3">
                    <Textarea
                      value={aiQuestion}
                      onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setAiQuestion(e.target.value)}
                      placeholder="Ask me anything about this course content..."
                      rows={3}
                    />
                    <Button 
                      type="submit" 
                      disabled={isAskingAI || !aiQuestion.trim()}
                      className="w-full"
                    >
                      {isAskingAI ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                          Thinking...
                        </>
                      ) : (
                        <>
                          <MessageSquare className="h-4 w-4 mr-2" />
                          Ask AI Assistant
                        </>
                      )}
                    </Button>
                  </form>

                  {aiResponse && (
                    <div className="border-l-4 border-purple-200 pl-4 py-3 bg-purple-50 rounded-r-lg">
                      <div className="flex items-center gap-2 mb-2">
                        <Brain className="h-4 w-4 text-purple-600" />
                        <span className="font-medium text-purple-800">AI Assistant</span>
                      </div>
                      <p className="text-sm text-purple-700">{aiResponse}</p>
                    </div>
                  )}

                  <div className="text-center pt-2">
                    <Button variant="outline" size="sm" disabled>
                      <Brain className="h-4 w-4 mr-2" />
                      Generate Practice Quiz
                    </Button>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Course Stats for Teachers/Admins */}
            {canManageCourse && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Users className="h-5 w-5 text-blue-600" />
                    Course Statistics
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="grid grid-cols-2 gap-4 text-center">
                      <div className="bg-blue-50 p-3 rounded-lg">
                        <div className="text-2xl font-bold text-blue-600">
                          {courseContent.length}
                        </div>
                        <div className="text-sm text-blue-600">Content Items</div>
                      </div>
                      <div className="bg-green-50 p-3 rounded-lg">
                        <div className="text-2xl font-bold text-green-600">0</div>
                        <div className="text-sm text-green-600">Enrolled Students</div>
                      </div>
                    </div>
                    <p className="text-xs text-gray-500 text-center">
                      Student enrollment and progress data will appear here
                    </p>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}